
project bootable/recovery/
diff --git a/minui/events.c b/minui/events.c
index a619df6..57aa4a9 100644
--- a/minui/events.c
+++ b/minui/events.c
@@ -70,11 +70,16 @@ int ev_init(ev_callback input_cb, void *data)
 
             /* TODO: add ability to specify event masks. For now, just assume
              * that only EV_KEY and EV_REL event types are ever needed. */
+			
+			// commented out so the touch panel events are allowed through
+			/*
             if (!test_bit(EV_KEY, ev_bits) && !test_bit(EV_REL, ev_bits) && !test_bit(EV_ABS, ev_bits)) {
                 close(fd);
                 continue;
             }
+			*/
 
+			printf("Loading (%s)\n", de->d_name);
             ev_fds[ev_count].fd = fd;
             ev_fds[ev_count].events = POLLIN;
             ev_fdinfo[ev_count].cb = input_cb;
@@ -88,6 +93,7 @@ int ev_init(ev_callback input_cb, void *data)
     return 0;
 }
 
+
 int ev_add_fd(int fd, ev_callback cb, void *data)
 {
     if (ev_misc_count == MAX_MISC_FDS || cb == NULL)

project frameworks/base/
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/DateView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/DateView.java
old mode 100644
new mode 100755
index 7378ade..13c2df2
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/DateView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/DateView.java
@@ -87,11 +87,11 @@ public class DateView extends TextView implements OnClickListener, OnLongClickLi
 
     @Override
     protected void onDraw(Canvas canvas) {
-        if (mParent == null) {
+        /*if (mParent == null) {
             mParent = (RelativeLayout) getParent();
             mParent.setOnClickListener(this);
             mParent.setOnLongClickListener(this);
-        }
+        }*/
 
         super.onDraw(canvas);
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
old mode 100644
new mode 100755
index 246c7b5..59d9dc8
--- a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
@@ -63,6 +63,8 @@ import android.widget.LinearLayout;
 import android.widget.ScrollView;
 import android.widget.TextView;
 
+import android.os.storage.StorageManager;
+
 import com.android.internal.statusbar.StatusBarIcon;
 import com.android.internal.statusbar.StatusBarNotification;
 import com.android.systemui.R;
@@ -174,6 +176,9 @@ public class TabletStatusBar extends BaseStatusBar implements
 
     View mCompatibilityHelpDialog = null;
 
+	// storage
+    private StorageManager mStorageManager;
+	
     // for disabling the status bar
     int mDisabled = 0;
 
@@ -272,6 +277,11 @@ public class TabletStatusBar extends BaseStatusBar implements
         mBluetoothController.addIconView(
                 (ImageView)mNotificationPanel.findViewById(R.id.bluetooth));
 
+		// storage
+        mStorageManager = (StorageManager) context.getSystemService(Context.STORAGE_SERVICE);
+        mStorageManager.registerListener(
+                new com.android.systemui.usb.StorageNotification(context));				
+						
         // network icons: either a combo icon that switches between mobile and data, or distinct
         // mobile and data icons
         final ImageView mobileRSSI =
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index a9d3462..a79f0d7 100755
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -1265,6 +1265,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             mHasSystemNavBar = false;
             mNavigationBarCanMove = false;
         }
+		
+		// Joaquim - tablet patch
+		mHasSystemNavBar = true;
+		mNavigationBarCanMove = false;
 
         if (!mHasSystemNavBar) {
             mHasNavigationBar = mContext.getResources().getBoolean(
diff --git a/services/java/com/android/server/wm/WindowManagerService.java b/services/java/com/android/server/wm/WindowManagerService.java
index 7907931..ae35cf1 100755
--- a/services/java/com/android/server/wm/WindowManagerService.java
+++ b/services/java/com/android/server/wm/WindowManagerService.java
@@ -6837,6 +6837,8 @@ public class WindowManagerService extends IWindowManager.Stub
         sl = reduceConfigLayout(sl, Surface.ROTATION_180, density, unrotDw, unrotDh);
         sl = reduceConfigLayout(sl, Surface.ROTATION_270, density, unrotDh, unrotDw);
         outConfig.smallestScreenWidthDp = (int)(displayInfo.smallestNominalAppWidth / density);
+		// Joaquim - tablet patch
+		outConfig.smallestScreenWidthDp = 721;
         outConfig.screenLayout = sl;
     }
 

project frameworks/native/
diff --git a/libs/gui/BufferQueue.cpp b/libs/gui/BufferQueue.cpp
old mode 100644
new mode 100755
index 590946a..f67e0ed
--- a/libs/gui/BufferQueue.cpp
+++ b/libs/gui/BufferQueue.cpp
@@ -281,6 +281,7 @@ status_t BufferQueue::dequeueBuffer(int *outBuf, sp<Fence>& outFence,
         int found = -1;
         int dequeuedCount = 0;
         bool tryAgain = true;
+
         while (tryAgain) {
             if (mAbandoned) {
                 ST_LOGE("dequeueBuffer: SurfaceTexture has been abandoned!");
@@ -325,8 +326,9 @@ status_t BufferQueue::dequeueBuffer(int *outBuf, sp<Fence>& outFence,
             // clients are not allowed to dequeue more than one buffer
             // if they didn't set a buffer count.
             if (!mOverrideMaxBufferCount && dequeuedCount) {
-                ST_LOGE("dequeueBuffer: can't dequeue multiple buffers without "
-                        "setting the buffer count");
+                // flud log....
+				//ST_LOGE("dequeueBuffer: can't dequeue multiple buffers without "
+                //        "setting the buffer count");
                 return -EINVAL;
             }
 
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.cpp b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
old mode 100644
new mode 100755
index 690ec8d..31d731e
--- a/services/surfaceflinger/DisplayHardware/HWComposer.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
@@ -17,7 +17,7 @@
 #define ATRACE_TAG ATRACE_TAG_GRAPHICS
 
 // Uncomment this to remove support for HWC_DEVICE_API_VERSION_0_3 and older
-// #define HWC_REMOVE_DEPRECATED_VERSIONS 1
+#define HWC_REMOVE_DEPRECATED_VERSIONS 1
 
 #include <stdint.h>
 #include <stdio.h>
@@ -48,28 +48,8 @@
 
 namespace android {
 
-// ---------------------------------------------------------------------------
-// Support for HWC_DEVICE_API_VERSION_0_3 and older:
-// Since v0.3 is deprecated and support will be dropped soon, as much as
-// possible the code is written to target v1.0. When using a v0.3 HWC, we
-// allocate v0.3 structures, but assign them to v1.0 pointers.
-
-#if HWC_REMOVE_DEPRECATED_VERSIONS
-// We need complete types to satisfy semantic checks, even though the code
-// paths that use these won't get executed at runtime (and will likely be dead-
-// code-eliminated). When we remove the code to support v0.3 we can remove
-// these as well.
-typedef hwc_layer_1_t hwc_layer_t;
-typedef hwc_display_contents_1_t hwc_layer_list_t;
-typedef hwc_composer_device_1_t hwc_composer_device_t;
-#endif
-
-// This function assumes we've already rejected HWC's with lower-than-required
-// versions. Don't use it for the initial "does HWC meet requirements" check!
-
 #define MIN_HWC_HEADER_VERSION 0
 
-
 static uint32_t hwcApiVersion(const hwc_composer_device_1_t* hwc) {
     uint32_t hwcVersion = hwc->common.version;
     if (MIN_HWC_HEADER_VERSION == 0 &&
@@ -95,106 +75,6 @@ static bool hwcHasApiVersion(const hwc_composer_device_1_t* hwc,
     return hwcApiVersion(hwc) >= (version & HARDWARE_API_VERSION_2_MAJ_MIN_MASK);
 }
 
-static bool hwcHasVsyncEvent(const hwc_composer_device_1_t* hwc) {
-    return hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_0_3);
-}
-
-static size_t sizeofHwcLayerList(const hwc_composer_device_1_t* hwc,
-        size_t numLayers) {
-    if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_1_0)) {
-        return sizeof(hwc_display_contents_1_t) + numLayers*sizeof(hwc_layer_1_t);
-    } else {
-        return sizeof(hwc_layer_list_t) + numLayers*sizeof(hwc_layer_t);
-    }
-}
-
-static int hwcEventControl(hwc_composer_device_1_t* hwc, int dpy,
-        int event, int enabled) {
-    if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_1_0)) {
-        return hwc->eventControl(hwc, dpy, event, enabled);
-    } else {
-        hwc_composer_device_t* hwc0 = reinterpret_cast<hwc_composer_device_t*>(hwc);
-        return hwc0->methods->eventControl(hwc0, event, enabled);
-    }
-}
-
-static int hwcBlank(hwc_composer_device_1_t* hwc, int dpy, int blank) {
-    if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_1_0)) {
-        return hwc->blank(hwc, dpy, blank);
-    } else {
-        if (blank) {
-            hwc_composer_device_t* hwc0 = reinterpret_cast<hwc_composer_device_t*>(hwc);
-            return hwc0->set(hwc0, NULL, NULL, NULL);
-        } else {
-            // HWC 0.x turns the screen on at the next set()
-            return NO_ERROR;
-        }
-    }
-}
-
-static int hwcPrepare(hwc_composer_device_1_t* hwc,
-        size_t numDisplays, hwc_display_contents_1_t** displays) {
-    if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_1_0)) {
-        return hwc->prepare(hwc, numDisplays, displays);
-    } else {
-        hwc_composer_device_t* hwc0 = reinterpret_cast<hwc_composer_device_t*>(hwc);
-        hwc_layer_list_t* list0 = reinterpret_cast<hwc_layer_list_t*>(displays[0]);
-        // In the past, SurfaceFlinger would pass a NULL list when doing full
-        // OpenGL ES composition. I don't know what, if any, dependencies there
-        // are on this behavior, so I'm playing it safe and preserving it.
-        // ... and I'm removing it. NULL layers kill the Tegra compositor (RC, Nov 2012)
-        /*if (list0->numHwLayers == 0)
-            return hwc0->prepare(hwc0, NULL);
-        else*/
-            return hwc0->prepare(hwc0, list0);
-    }
-}
-static int hwcSet(hwc_composer_device_1_t* hwc, EGLDisplay dpy, EGLSurface sur,
-        size_t numDisplays, hwc_display_contents_1_t** displays) {
-    int err;
-    if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_1_0)) {
-        displays[0]->dpy = dpy;
-        displays[0]->sur = sur;
-        err = hwc->set(hwc, numDisplays, displays);
-    } else {
-        hwc_composer_device_t* hwc0 = reinterpret_cast<hwc_composer_device_t*>(hwc);
-        hwc_layer_list_t* list0 = reinterpret_cast<hwc_layer_list_t*>(displays[0]);
-        err = hwc0->set(hwc0, dpy, sur, list0);
-    }
-    return err;
-}
-
-static uint32_t& hwcFlags(hwc_composer_device_1_t* hwc,
-        hwc_display_contents_1_t* display) {
-    if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_1_0)) {
-        return display->flags;
-    } else {
-        hwc_layer_list_t* list0 = reinterpret_cast<hwc_layer_list_t*>(display);
-        return list0->flags;
-    }
-}
-
-static size_t& hwcNumHwLayers(hwc_composer_device_1_t* hwc,
-        hwc_display_contents_1_t* display) {
-    if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_1_0)) {
-        return display->numHwLayers;
-    } else {
-        hwc_layer_list_t* list0 = reinterpret_cast<hwc_layer_list_t*>(display);
-        return list0->numHwLayers;
-    }
-}
-
-static void hwcDump(hwc_composer_device_1_t* hwc, char* buff, int buff_len) {
-    if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_1_0)) {
-        if (hwc->dump)
-            hwc->dump(hwc, buff, buff_len);
-    } else if (hwcHasApiVersion(hwc, HWC_DEVICE_API_VERSION_0_1)) {
-        hwc_composer_device_t* hwc0 = reinterpret_cast<hwc_composer_device_t*>(hwc);
-        if (hwc0->dump)
-            hwc0->dump(hwc0, buff, buff_len);
-    }
-}
-
 // ---------------------------------------------------------------------------
 
 struct HWComposer::cb_context {
@@ -257,48 +137,32 @@ HWComposer::HWComposer(
         ALOGI("Using %s version %u.%u", HWC_HARDWARE_COMPOSER,
               (hwcApiVersion(mHwc) >> 24) & 0xff,
               (hwcApiVersion(mHwc) >> 16) & 0xff);
-        if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0)) {
-            if (mHwc->registerProcs) {
-                mCBContext->hwc = this;
-                mCBContext->procs.invalidate = &hook_invalidate;
-                mCBContext->procs.vsync = &hook_vsync;
-                if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1))
-                    mCBContext->procs.hotplug = &hook_hotplug;
-                else
-                    mCBContext->procs.hotplug = NULL;
-                memset(mCBContext->procs.zero, 0, sizeof(mCBContext->procs.zero));
-                mHwc->registerProcs(mHwc, &mCBContext->procs);
-            }
-        } else {
-            hwc_composer_device_t* hwc0 = reinterpret_cast<hwc_composer_device_t*>(mHwc);
-            if (hwc0->registerProcs) {
-                mCBContext->hwc = this;
-                mCBContext->procs.invalidate = &hook_invalidate;
-                mCBContext->procs.vsync = &hook_vsync;
-                memset(mCBContext->procs.zero, 0, sizeof(mCBContext->procs.zero));
-                hwc0->registerProcs(hwc0, &mCBContext->procs);
-            }
+        if (mHwc->registerProcs) {
+            mCBContext->hwc = this;
+            mCBContext->procs.invalidate = &hook_invalidate;
+            mCBContext->procs.vsync = &hook_vsync;
+            if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1))
+                mCBContext->procs.hotplug = &hook_hotplug;
+            else
+                mCBContext->procs.hotplug = NULL;
+            memset(mCBContext->procs.zero, 0, sizeof(mCBContext->procs.zero));
+            mHwc->registerProcs(mHwc, &mCBContext->procs);
         }
 
         // don't need a vsync thread if we have a hardware composer
         needVSyncThread = false;
         // always turn vsync off when we start
-        if (hwcHasVsyncEvent(mHwc)) {
-            eventControl(HWC_DISPLAY_PRIMARY, HWC_EVENT_VSYNC, 0);
+        eventControl(HWC_DISPLAY_PRIMARY, HWC_EVENT_VSYNC, 0);
 
-            // the number of displays we actually have depends on the
-            // hw composer version
-            if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_2)) {
-                // 1.2 adds support for virtual displays
-                mNumDisplays = MAX_DISPLAYS;
-            } else if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1)) {
-                // 1.1 adds support for multiple displays
-                mNumDisplays = HWC_NUM_DISPLAY_TYPES;
-            } else {
-                mNumDisplays = 1;
-            }
+        // the number of displays we actually have depends on the
+        // hw composer version
+        if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_2)) {
+            // 1.2 adds support for virtual displays
+            mNumDisplays = MAX_DISPLAYS;
+        } else if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1)) {
+            // 1.1 adds support for multiple displays
+            mNumDisplays = HWC_NUM_DISPLAY_TYPES;
         } else {
-            needVSyncThread = true;
             mNumDisplays = 1;
         }
     }
@@ -369,10 +233,9 @@ void HWComposer::loadHwcModule()
         return;
     }
 
-    if (HWC_REMOVE_DEPRECATED_VERSIONS &&
-        (!hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0) ||
+    if (!hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0) ||
             hwcHeaderVersion(mHwc) < MIN_HWC_HEADER_VERSION ||
-            hwcHeaderVersion(mHwc) > HWC_HEADER_VERSION)) {
+            hwcHeaderVersion(mHwc) > HWC_HEADER_VERSION) {
         ALOGE("%s device version %#x unsupported, will not be used",
               HWC_HARDWARE_COMPOSER, mHwc->common.version);
         hwc_close_1(mHwc);
@@ -592,26 +455,22 @@ void HWComposer::eventControl(int disp, int event, int enabled) {
         return;
     }
     status_t err = NO_ERROR;
-    if (mHwc && !mDebugForceFakeVSync && hwcHasVsyncEvent(mHwc))  {
-        if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0)) {
-            // NOTE: we use our own internal lock here because we have to call
-            // into the HWC with the lock held, and we want to make sure
-            // that even if HWC blocks (which it shouldn't), it won't
-            // affect other threads.
-            Mutex::Autolock _l(mEventControlLock);
-            const int32_t eventBit = 1UL << event;
-            const int32_t newValue = enabled ? eventBit : 0;
-            const int32_t oldValue = mDisplayData[disp].events & eventBit;
-            if (newValue != oldValue) {
-                ATRACE_CALL();
-                err = hwcEventControl(mHwc, disp, event, enabled);
-                if (!err) {
-                    int32_t& events(mDisplayData[disp].events);
-                    events = (events & ~eventBit) | newValue;
-                }
+    if (mHwc && !mDebugForceFakeVSync) {
+        // NOTE: we use our own internal lock here because we have to call
+        // into the HWC with the lock held, and we want to make sure
+        // that even if HWC blocks (which it shouldn't), it won't
+        // affect other threads.
+        Mutex::Autolock _l(mEventControlLock);
+        const int32_t eventBit = 1UL << event;
+        const int32_t newValue = enabled ? eventBit : 0;
+        const int32_t oldValue = mDisplayData[disp].events & eventBit;
+        if (newValue != oldValue) {
+            ATRACE_CALL();
+            err = mHwc->eventControl(mHwc, disp, event, enabled);
+            if (!err) {
+                int32_t& events(mDisplayData[disp].events);
+                events = (events & ~eventBit) | newValue;
             }
-        } else {
-            err = hwcEventControl(mHwc, disp, event, enabled);
         }
         // error here should not happen -- not sure what we should
         // do if it does.
@@ -636,7 +495,8 @@ status_t HWComposer::createWorkList(int32_t id, size_t numLayers) {
             numLayers++;
         }
         if (disp.capacity < numLayers || disp.list == NULL) {
-            size_t size = sizeofHwcLayerList(mHwc, numLayers);
+            size_t size = sizeof(hwc_display_contents_1_t)
+                    + numLayers * sizeof(hwc_layer_1_t);
             free(disp.list);
             disp.list = (hwc_display_contents_1_t*)malloc(size);
             disp.capacity = numLayers;
@@ -659,11 +519,9 @@ status_t HWComposer::createWorkList(int32_t id, size_t numLayers) {
             disp.framebufferTarget->acquireFenceFd = -1;
             disp.framebufferTarget->releaseFenceFd = -1;
         }
-        if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0)) {
-            disp.list->retireFenceFd = -1;
-        }
-        hwcFlags(mHwc, disp.list) = HWC_GEOMETRY_CHANGED;
-        hwcNumHwLayers(mHwc, disp.list) = numLayers;
+        disp.list->retireFenceFd = -1;
+        disp.list->flags = HWC_GEOMETRY_CHANGED;
+        disp.list->numHwLayers = numLayers;
     }
     return NO_ERROR;
 }
@@ -710,7 +568,7 @@ status_t HWComposer::prepare() {
         }
         if (!disp.connected && disp.list != NULL) {
             ALOGW("WARNING: disp %d: connected, non-null list, layers=%d",
-                    i, hwcNumHwLayers(mHwc, disp.list));
+                  i, disp.list->numHwLayers);
         }
         mLists[i] = disp.list;
         if (mLists[i]) {
@@ -721,51 +579,27 @@ status_t HWComposer::prepare() {
                 // garbage data to catch improper use
                 mLists[i]->dpy = (hwc_display_t)0xDEADBEEF;
                 mLists[i]->sur = (hwc_surface_t)0xDEADBEEF;
-            } else if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0)) {
+            } else {
                 mLists[i]->dpy = EGL_NO_DISPLAY;
                 mLists[i]->sur = EGL_NO_SURFACE;
             }
         }
     }
-    int err = hwcPrepare(mHwc, mNumDisplays, mLists);
+
+    int err = mHwc->prepare(mHwc, mNumDisplays, mLists);
     ALOGE_IF(err, "HWComposer: prepare failed (%s)", strerror(-err));
 
     if (err == NO_ERROR) {
-        if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0)) {
-            // here we're just making sure that "skip" layers are set
-            // to HWC_FRAMEBUFFER and we're also counting how many layers
-            // we have of each type.
-            for (size_t i=0 ; i<mNumDisplays ; i++) {
-                DisplayData& disp(mDisplayData[i]);
-                disp.hasFbComp = false;
-                disp.hasOvComp = false;
-                if (disp.list) {
-                    for (size_t i=0 ; i<hwcNumHwLayers(mHwc, disp.list) ; i++) {
-                        hwc_layer_1_t& l = disp.list->hwLayers[i];
-
-                        //ALOGD("prepare: %d, type=%d, handle=%p",
-                        //        i, l.compositionType, l.handle);
-
-                        if (l.flags & HWC_SKIP_LAYER) {
-                            l.compositionType = HWC_FRAMEBUFFER;
-                        }
-                        if (l.compositionType == HWC_FRAMEBUFFER) {
-                            disp.hasFbComp = true;
-                        }
-                        if (l.compositionType == HWC_OVERLAY) {
-                            disp.hasOvComp = true;
-                        }
-                    }
-                }
-            }
-        } else {
-            DisplayData& disp(mDisplayData[0]);
+        // here we're just making sure that "skip" layers are set
+        // to HWC_FRAMEBUFFER and we're also counting how many layers
+        // we have of each type.
+        for (size_t i=0 ; i<mNumDisplays ; i++) {
+            DisplayData& disp(mDisplayData[i]);
             disp.hasFbComp = false;
             disp.hasOvComp = false;
             if (disp.list) {
-                hwc_layer_list_t* list0 = reinterpret_cast<hwc_layer_list_t*>(disp.list);
-                for (size_t i=0 ; i<hwcNumHwLayers(mHwc, disp.list) ; i++) {
-                    hwc_layer_t& l = list0->hwLayers[i];
+                for (size_t i=0 ; i<disp.list->numHwLayers ; i++) {
+                    hwc_layer_1_t& l = disp.list->hwLayers[i];
 
                     //ALOGD("prepare: %d, type=%d, handle=%p",
                     //        i, l.compositionType, l.handle);
@@ -781,9 +615,7 @@ status_t HWComposer::prepare() {
                     }
                 }
             }
-
         }
-
     }
     return (status_t)err;
 }
@@ -819,32 +651,24 @@ int HWComposer::getAndResetReleaseFenceFd(int32_t id) {
 status_t HWComposer::commit() {
     int err = NO_ERROR;
     if (mHwc) {
-        if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0)) {
-            if (!hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1)) {
-                // On version 1.0, the OpenGL ES target surface is communicated
-                // by the (dpy, sur) fields and we are guaranteed to have only
-                // a single display.
-                mLists[0]->dpy = eglGetCurrentDisplay();
-                mLists[0]->sur = eglGetCurrentSurface(EGL_DRAW);
-            }
-            err = hwcSet(mHwc, mLists[0]->dpy, mLists[0]->sur, mNumDisplays,
-                    const_cast<hwc_display_contents_1_t**>(mLists));
-        } else {
-            err = hwcSet(mHwc, eglGetCurrentDisplay(), eglGetCurrentSurface(EGL_DRAW), mNumDisplays,
-                    const_cast<hwc_display_contents_1_t**>(mLists));
+        if (!hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1)) {
+            // On version 1.0, the OpenGL ES target surface is communicated
+            // by the (dpy, sur) fields and we are guaranteed to have only
+            // a single display.
+            mLists[0]->dpy = eglGetCurrentDisplay();
+            mLists[0]->sur = eglGetCurrentSurface(EGL_DRAW);
         }
 
+        err = mHwc->set(mHwc, mNumDisplays, mLists);
 
         for (size_t i=0 ; i<mNumDisplays ; i++) {
             DisplayData& disp(mDisplayData[i]);
             if (disp.list) {
-                if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0)) {
-                    if (disp.list->retireFenceFd != -1) {
-                        close(disp.list->retireFenceFd);
-                        disp.list->retireFenceFd = -1;
-                    }
+                if (disp.list->retireFenceFd != -1) {
+                    close(disp.list->retireFenceFd);
+                    disp.list->retireFenceFd = -1;
                 }
-                hwcFlags(mHwc, disp.list) &= ~HWC_GEOMETRY_CHANGED;
+                disp.list->flags &= ~HWC_GEOMETRY_CHANGED;
             }
         }
     }
@@ -854,10 +678,8 @@ status_t HWComposer::commit() {
 status_t HWComposer::release(int disp) {
     LOG_FATAL_IF(disp >= HWC_NUM_DISPLAY_TYPES);
     if (mHwc) {
-        if (hwcHasVsyncEvent(mHwc)) {
-            eventControl(disp, HWC_EVENT_VSYNC, 0);
-        }
-        return (status_t)hwcBlank(mHwc, disp, 1);
+        eventControl(disp, HWC_EVENT_VSYNC, 0);
+        return (status_t)mHwc->blank(mHwc, disp, 1);
     }
     return NO_ERROR;
 }
@@ -865,7 +687,7 @@ status_t HWComposer::release(int disp) {
 status_t HWComposer::acquire(int disp) {
     LOG_FATAL_IF(disp >= HWC_NUM_DISPLAY_TYPES);
     if (mHwc) {
-        return (status_t)hwcBlank(mHwc, disp, 0);
+        return (status_t)mHwc->blank(mHwc, disp, 0);
     }
     return NO_ERROR;
 }
@@ -958,93 +780,6 @@ private:
     }
 };
 
-// #if !HWC_REMOVE_DEPRECATED_VERSIONS
-/*
- * Concrete implementation of HWCLayer for HWC_DEVICE_API_VERSION_0_3
- * This implements the HWCLayer side of HWCIterableLayer.
- */
-class HWCLayerVersion0 : public Iterable<HWCLayerVersion0, hwc_layer_t> {
-public:
-    HWCLayerVersion0(hwc_layer_t* layer)
-        : Iterable<HWCLayerVersion0, hwc_layer_t>(layer) { }
-
-    virtual int32_t getCompositionType() const {
-        return getLayer()->compositionType;
-    }
-    virtual uint32_t getHints() const {
-        return getLayer()->hints;
-    }
-    virtual int getAndResetReleaseFenceFd() {
-        // not supported on VERSION_03
-        return -1;
-    }
-    virtual void setAcquireFenceFd(int fenceFd) {
-        if (fenceFd != -1) {
-            ALOGE("HWC 0.x can't handle acquire fences");
-            close(fenceFd);
-        }
-    }
-
-    virtual void setDefaultState() {
-        getLayer()->compositionType = HWC_FRAMEBUFFER;
-        getLayer()->hints = 0;
-        getLayer()->flags = HWC_SKIP_LAYER;
-        getLayer()->handle = 0;
-        getLayer()->transform = 0;
-        getLayer()->blending = HWC_BLENDING_NONE;
-        getLayer()->visibleRegionScreen.numRects = 0;
-        getLayer()->visibleRegionScreen.rects = NULL;
-    }
-    virtual void setSkip(bool skip) {
-        if (skip) {
-            getLayer()->flags |= HWC_SKIP_LAYER;
-        } else {
-            getLayer()->flags &= ~HWC_SKIP_LAYER;
-        }
-    }
-    virtual void setBlending(uint32_t blending) {
-        getLayer()->blending = blending;
-    }
-    virtual void setTransform(uint32_t transform) {
-        getLayer()->transform = transform;
-    }
-    virtual void setFrame(const Rect& frame) {
-        reinterpret_cast<Rect&>(getLayer()->displayFrame) = frame;
-    }
-    virtual void setCrop(const Rect& crop) {
-        reinterpret_cast<Rect&>(getLayer()->sourceCrop) = crop;
-    }
-    virtual void setVisibleRegionScreen(const Region& reg) {
-        // Region::getSharedBuffer creates a reference to the underlying
-        // SharedBuffer of this Region, this reference is freed
-        // in onDisplayed()
-        hwc_region_t& visibleRegion = getLayer()->visibleRegionScreen;
-        SharedBuffer const* sb = reg.getSharedBuffer(&visibleRegion.numRects);
-        visibleRegion.rects = reinterpret_cast<hwc_rect_t const *>(sb->data());
-    }
-    virtual void setBuffer(const sp<GraphicBuffer>& buffer) {
-        if (buffer == 0 || buffer->handle == 0) {
-            getLayer()->compositionType = HWC_FRAMEBUFFER;
-            getLayer()->flags |= HWC_SKIP_LAYER;
-            getLayer()->handle = 0;
-        } else {
-            getLayer()->handle = buffer->handle;
-        }
-    }
-    virtual void onDisplayed() {
-        hwc_region_t& visibleRegion = getLayer()->visibleRegionScreen;
-        SharedBuffer const* sb = SharedBuffer::bufferFromData(visibleRegion.rects);
-        if (sb) {
-            sb->release();
-            // not technically needed but safer
-            visibleRegion.numRects = 0;
-            visibleRegion.rects = NULL;
-        }
-
-    }
-};
-// #endif // !HWC_REMOVE_DEPRECATED_VERSIONS
-
 /*
  * Concrete implementation of HWCLayer for HWC_DEVICE_API_VERSION_1_0.
  * This implements the HWCLayer side of HWCIterableLayer.
@@ -1139,15 +874,10 @@ HWComposer::LayerListIterator HWComposer::getLayerIterator(int32_t id, size_t in
         return LayerListIterator();
     }
     const DisplayData& disp(mDisplayData[id]);
-    if (!mHwc || !disp.list || index > hwcNumHwLayers(mHwc,disp.list)) {
+    if (!mHwc || !disp.list || index > disp.list->numHwLayers) {
         return LayerListIterator();
     }
-    if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_0)) {
-       return LayerListIterator(new HWCLayerVersion1(disp.list->hwLayers), index);
-    } else {
-       hwc_layer_list_t* list0 = reinterpret_cast<hwc_layer_list_t*>(disp.list);
-       return LayerListIterator(new HWCLayerVersion0(list0->hwLayers), index);
-    }
+    return LayerListIterator(new HWCLayerVersion1(disp.list->hwLayers), index);
 }
 
 /*
@@ -1165,7 +895,7 @@ HWComposer::LayerListIterator HWComposer::end(int32_t id) {
     if (uint32_t(id) <= 31 && mAllocatedDisplayIDs.hasBit(id)) {
         const DisplayData& disp(mDisplayData[id]);
         if (mHwc && disp.list) {
-            numLayers = hwcNumHwLayers(mHwc, disp.list);
+            numLayers = disp.list->numHwLayers;
             if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_1)) {
                 // with HWC 1.1, the last layer is always the HWC_FRAMEBUFFER_TARGET,
                 // which we ignore when iterating through the layer list.
@@ -1247,8 +977,9 @@ void HWComposer::dump(String8& result, char* buffer, size_t SIZE) const {
             }
         }
     }
-    if (mHwc) {
-        hwcDump(mHwc, buffer, SIZE);
+
+    if (mHwc && mHwc->dump) {
+        mHwc->dump(mHwc, buffer, SIZE);
         result.append(buffer);
     }
 }
@@ -1302,7 +1033,7 @@ bool HWComposer::VSyncThread::threadLoop() {
         err = clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &spec, NULL);
     } while (err<0 && errno == EINTR);
 
-    if (err == 0 && mEnabled) {
+    if (err == 0) {
         mHwc.mEventHandler.onVSyncReceived(0, next_vsync);
     }
 
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.h b/services/surfaceflinger/DisplayHardware/HWComposer.h
old mode 100644
new mode 100755

project hardware/libhardware/
diff --git a/Android.mk b/Android.mk
old mode 100644
new mode 100755
index 7467bf2..700a85f
--- a/Android.mk
+++ b/Android.mk
@@ -10,7 +10,7 @@ LOCAL_SHARED_LIBRARIES := libcutils
 
 LOCAL_INCLUDES += $(LOCAL_PATH)
 
-LOCAL_CFLAGS  += -DQEMU_HARDWARE
+LOCAL_CFLAGS  += -DQEMU_HARDWARE -DDISABLE_HW_ID_MATCH_CHECK
 QEMU_HARDWARE := true
 
 LOCAL_SHARED_LIBRARIES += libdl

project packages/apps/QuickSearchBox/
diff --git a/Android.mk b/Android.mk
old mode 100644
new mode 100755
index b05bb74..1d802b2
--- a/Android.mk
+++ b/Android.mk
@@ -36,7 +36,8 @@ LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res
 
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
 
-include $(BUILD_PACKAGE)
+# Search now in Google NOW :)
+# include $(BUILD_PACKAGE)
 
 # Also build our test apk
-include $(call all-makefiles-under,$(LOCAL_PATH))
+# include $(call all-makefiles-under,$(LOCAL_PATH))

project packages/apps/Trebuchet/
diff --git a/Android.mk b/Android.mk
old mode 100644
new mode 100755

project system/core/
diff --git a/init/Android.mk b/init/Android.mk
old mode 100644
new mode 100755

project system/vold/
diff --git a/main.cpp b/main.cpp
old mode 100644
new mode 100755
index afbfa41..2c9da13
--- a/main.cpp
+++ b/main.cpp
@@ -162,11 +162,11 @@ static int parse_mount_flags(char *mount_flags)
 static int process_config(VolumeManager *vm) {
     FILE *fp;
     int n = 0;
-    char line[255];
+    char line[1024];
     Volume *vol = 0;
 
     if ((fp = fopen("/proc/cmdline", "r"))) {
-        while (fscanf(fp, "%s", line) > 0) {
+        while (fscanf(fp, "%1023s", line) > 0) {
             if (!strncmp(line, "SDCARD=", 7)) {
                 const char *sdcard = line + 7;
                 if (*sdcard) {

project vendor/cm/
diff --git a/vendorsetup.sh b/vendorsetup.sh
old mode 100644
new mode 100755
index f052d41..a8ebdc0
--- a/vendorsetup.sh
+++ b/vendorsetup.sh
@@ -1,4 +1,5 @@
-for combo in $(wget -o /dev/null -O - https://raw.github.com/CyanogenMod/hudson/master/cm-build-targets | grep cm-10.1 | awk {'print $1'})
+#for combo in $(wget -o /dev/null -O - https://raw.github.com/CyanogenMod/hudson/master/cm-build-targets | grep cm-10.1 | awk {'print $1'})
+for combo in $(cat vendor/cm/my-build-targets)
 do
     add_lunch_combo $combo
 done
